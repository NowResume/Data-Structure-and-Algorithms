//single linked list operations
#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data ;
	struct node* link ;
};
struct node* root=NULL;
int len ;
void append();
void addatbegin();
void addafter();
int length();
void display();
void delete();
void reverse();
void sort();
void deletealt();


void main()
{
	int ch;
	while (1)
	{
		printf("---------Singly linked list operations-------------");
		printf("\n1.Append\n");
		printf("2.Add data in beginning\n");
		printf("3.Add data after a node\n");
		printf("4.Length\n");
		printf("5.Dispaly\n");
		printf("6.Reverse the elements\n");
		printf("7.Delete\n");
		printf("8.Sort in ascending order\n");
		printf("9.Delete alternate nodes\n");
		printf("10.Quit\n");
		
		printf("Enter your choice : ");
		scanf("%d",&ch);
		
		switch(ch)
		{
			case 1 : append();
					 break;
					 
			case 2 : addatbegin();
					 break;
					 
			case 3 : addafter();
					 break;
			
			case 4 : len=length();
					 printf("Length :%d\n\n",len);
					 break;
					 
			case 5 : display();
					 break;
					 
			case 6 : reverse();
					 break;		 
					 
			case 7 : delete();
					 break;
			
			case 8 : sort();
					 break;
					 
			case 9 : deletealt();
					 break;
					 
			case 10 : exit(1);
			default: printf("Invalid input \n\n");
					 
			
		}
	}
}

void append()
{
	struct node* temp;
	temp = (struct node*)malloc(sizeof(struct node));
    printf("Enter node data :");
    scanf("%d",&temp->data);
    temp->link=NULL ;
    
    if(root==NULL)
    {
    	root=temp;
	}
	else
	{
		struct node* p;
		p=root ;
		
		while(p->link!=NULL)
		{
			p=p->link;
			
		}
		p->link=temp;
	}
}

int length()
{
	int count=0;
	struct node* temp;
	temp =root ;
	
	while(temp!=NULL)
	{
		count++;
		temp = temp->link;	
	}
	return count ;
}

void display()
{
	struct node* temp;
	temp = root;
	if(temp==NULL)
	{
		printf("List is empty \n\n");
	}
	else
	{
		while(temp!=NULL)
		{
			printf("%d-->",temp->data);
			temp=temp->link;
		}
		printf("\n\n");
	}
}

void addatbegin(void)
{
	struct node* temp;
	temp=(struct node*)malloc(sizeof(struct node));
	printf("Enter node data :");
    scanf("%d",&temp->data);
    temp->link=NULL ;
	
	temp->link=root;
	root=temp;
}

void delete(void)
{
	struct node* temp;
	int loc;
	printf("Enter location to delete :");
	scanf("%d",&loc);
	if(loc>length())
	{
		printf("Invalid location :");
	}
	else if(loc==1)
	{
		temp=root;
		root=temp->link;
		temp->link=NULL;
		free(temp);
	}
	else
	{
		struct node* p=root,*q;
		int i=1;
		while(i<loc-1)
		{
			p=p->link;
			i++;
		}
		q=p->link;
		p->link=q->link;
		q->link=NULL;
		free(q);
	}
}

void addafter()
{
	int loc,len,i=1;
	printf("Enter location after which node is to be inserted :");
	scanf("%d",&loc);
	
	if(loc==0)
	{
		addatbegin();
		return;
	}
	struct node* temp,*p;
	
	len=length();
	if(loc>len)
	{
		printf("\nInvalid location\n");
		printf("Currently list is containing %d nodes\n",len);
	}
	else
	{
		p=root;
		while(i<loc)
		{
			p=p->link;
			i++;
		}
		temp=(struct node*)malloc(sizeof(struct node));
		printf("Enter node data :");
    	scanf("%d",&temp->data);
    	temp->link=NULL ;
    	temp->link=p->link;
    	p->link=temp;
	}
}

void reverse()
{
	int k,j,len,temp;
	int i=0;
	struct node*p,*q;
	len=length();
	j=len-1;
	p=q=root;
	while(i<j)
	{
		k=0;
		while(i<j)
		{
			k=0;
			while(k<j)
			{
				q=q->link;
				k++;
			}
			temp=p->data;
			p->data=q->data;
			q->data=temp;
			i++;
			j--;
			p=p->link;
			q=root;
		}
	}
}
void sort()
{
	struct node *p=root,*q=NULL;  
    int temp;  
          
    if(root==NULL) 
	{  
        return;  
    }  
    else 
	{  
        while(p!=NULL) 
		{  
            q=p->link;   
            while(q!=NULL) 
			{  
                if(p->data>q->data) 
				{  
                    temp=p->data;  
                    p->data=q->data;  
                    q->data=temp;  
                }  
                q=q->link;  
            }  
            p=p->link;  
        }      
    }  
}
void deletealt()
{
	struct node* p=root,*q;
	while(p!=NULL)
	{	
		q=p->link;
		p->link=q->link;
		q->link=NULL;
		free(q);
		p=p->link;
	}
}


